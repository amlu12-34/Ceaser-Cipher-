import tkinter as tk
from tkinter import ttk, messagebox

class CaesarCipherApp:
    def __init__(self, master):
        self.master = master
        master.title("Caesar Cipher Tool")
        master.resizable(False, False)

        BG_COLOR = "#f3f4f6"
        CARD_COLOR = "#ffffff"
        PRIMARY_COLOR = "#3b82f6"
        SECONDARY_COLOR = "#10b981"
        TEXT_COLOR = "#1f2937"

        style = ttk.Style()
        style.theme_use('clam') 
        
        master.configure(bg=BG_COLOR)

        style.configure('Card.TFrame', background=CARD_COLOR, padding=25, relief='flat', borderwidth=0)
        
        style.configure('Header.TLabel', font=('Inter', 18, 'bold'), foreground=TEXT_COLOR, background=CARD_COLOR)
        style.configure('TLabel', font=('Inter', 10), background=CARD_COLOR, foreground=TEXT_COLOR)
        
        style.configure('TEntry', font=('Inter', 12), foreground=TEXT_COLOR, fieldbackground='#f0f4f8')
        
        style.configure('Primary.TButton', font=('Inter', 10, 'bold'), background=PRIMARY_COLOR, foreground='white')
        style.map('Primary.TButton', background=[('active', '#2563eb')])
        
        style.configure('Secondary.TButton', font=('Inter', 10, 'bold'), background=SECONDARY_COLOR, foreground='white')
        style.map('Secondary.TButton', background=[('active', '#059669')])

        style.configure('Copy.TButton', font=('Inter', 9), background='#6b7280', foreground='white')
        style.map('Copy.TButton', background=[('active', '#4b5563')])

        self.input_text = tk.StringVar()
        self.output_text = tk.StringVar()
        self.key = tk.IntVar(value=3) 

        main_frame = ttk.Frame(master, style='Card.TFrame')
        main_frame.pack(padx=30, pady=30, fill='both', expand=True)

        ttk.Label(main_frame, text="Caesar Cipher Tool", style='Header.TLabel').grid(row=0, column=0, columnspan=2, pady=(0, 20), sticky='w')

        key_frame = ttk.Frame(main_frame, style='Card.TFrame')
        key_frame.grid(row=1, column=0, columnspan=2, sticky='w', pady=(0, 10))
        ttk.Label(key_frame, text="Shift Key (1-25):").pack(side='left', padx=(0, 10))
        self.key_entry = ttk.Entry(key_frame, textvariable=self.key, width=5, justify='center')
        self.key_entry.pack(side='left')
        
        ttk.Label(main_frame, text="Input Text:").grid(row=2, column=0, sticky='w', padx=5, pady=(10, 5))
        self.input_text_widget = tk.Text(main_frame, height=5, width=55, wrap='word', font=('Inter', 10), padx=8, pady=8, borderwidth=1, relief='sunken')
        self.input_text_widget.grid(row=3, column=0, columnspan=2, sticky='ew', padx=5, pady=5)

        button_frame = ttk.Frame(main_frame, style='Card.TFrame')
        button_frame.grid(row=4, column=0, columnspan=2, pady=(15, 20))
        
        ttk.Button(button_frame, text="Encrypt", style='Primary.TButton', command=lambda: self.process('encrypt')).pack(side='left', padx=15, ipady=5, ipadx=10)
        ttk.Button(button_frame, text="Decrypt", style='Secondary.TButton', command=lambda: self.process('decrypt')).pack(side='left', padx=15, ipady=5, ipadx=10)

        ttk.Label(main_frame, text="Output Text:").grid(row=5, column=0, sticky='w', padx=5, pady=(10, 5))
        
        output_controls_frame = ttk.Frame(main_frame, style='Card.TFrame')
        output_controls_frame.grid(row=6, column=0, columnspan=2, sticky='ew', padx=5, pady=5)
        
        self.output_text_widget = tk.Text(output_controls_frame, height=5, width=50, wrap='word', state='disabled', font=('Inter', 10), padx=8, pady=8, borderwidth=1, relief='groove', background='#f7f7f7')
        self.output_text_widget.pack(side='left', fill='x', expand=True)

        ttk.Button(output_controls_frame, text="Copy", style='Copy.TButton', command=self.copy_output).pack(side='right', padx=(10, 0), ipady=5)

    def caesar(self, text, key, mode):
        result = ''
        if mode == 'decrypt':
            key = -key 
        
        for char in text:
            if 'a' <= char <= 'z':
                start = ord('a')
                shifted_ord = (ord(char) - start + key) % 26 + start
                result += chr(shifted_ord)
            elif 'A' <= char <= 'Z':
                start = ord('A')
                shifted_ord = (ord(char) - start + key) % 26 + start
                result += chr(shifted_ord)
            else:
                result += char
        return result

    def process(self, mode):
        try:
            key_val = self.key.get()
            if not (0 < key_val < 26):
                messagebox.showerror("Error", "Shift Key must be between 1 and 25.")
                return

        except tk.TclError:
            messagebox.showerror("Error", "Invalid Key. Please enter an integer.")
            return

        input_data = self.input_text_widget.get("1.0", tk.END).strip()
        
        if not input_data:
            messagebox.showwarning("Warning", "Input text field cannot be empty.")
            return

        processed_text = self.caesar(input_data, key_val, mode)
        
        self.output_text_widget.config(state='normal')
        self.output_text_widget.delete('1.0', tk.END)
        self.output_text_widget.insert('1.0', processed_text)
        self.output_text_widget.config(state='disabled')
    
    def copy_output(self):
        self.output_text_widget.config(state='normal')
        output_data = self.output_text_widget.get("1.0", tk.END).strip()
        self.output_text_widget.config(state='disabled')

        if output_data:
            self.master.clipboard_clear()
            self.master.clipboard_append(output_data)
            for widget in self.master.winfo_children():
                if isinstance(widget, ttk.Frame):
                    for child in widget.winfo_children():
                        if isinstance(child, ttk.Frame):
                            for grandchild in child.winfo_children():
                                if isinstance(grandchild, ttk.Button) and grandchild.cget('text') == 'Copy':
                                    copy_btn = grandchild
                                    original_text = copy_btn.cget('text')
                                    copy_btn.configure(text="Copied!", state='disabled')
                                    self.master.after(1000, lambda: copy_btn.configure(text=original_text, state='normal'))
                                    return
            

if __name__ == "__main__":
    root = tk.Tk()
    app = CaesarCipherApp(root)
    root.mainloop()
